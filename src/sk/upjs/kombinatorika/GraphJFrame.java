/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GraphJFrame.java
 *
 * Created on 8.5.2014, 12:53:14
 */
package sk.upjs.kombinatorika;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import sk.upjs.paz.Graph;

/**
 *
 * @author student
 */
public class GraphJFrame extends javax.swing.JFrame {

    /** Creates new form GraphJFrame */
    public GraphJFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    GraphReader gr;
    double[][] matrix;
    Graph graph;
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        suborTextfield = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        dijkstraBtn = new javax.swing.JButton();
        fordBtn = new javax.swing.JButton();
        floydBtn = new javax.swing.JButton();
        primBtn = new javax.swing.JButton();
        kruskalBtn = new javax.swing.JButton();
        christofidesBtn = new javax.swing.JButton();
        maxTokBtn = new javax.swing.JButton();
        matchingBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jButton1.setText("Načítaj graf");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        outputTextArea.setColumns(20);
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        dijkstraBtn.setText("Optimálna cesta (Dijkstra)");
        dijkstraBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dijkstraBtnActionPerformed(evt);
            }
        });

        fordBtn.setText("Optimálna cesta (Ford)");
        fordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fordBtnActionPerformed(evt);
            }
        });

        floydBtn.setText("Optimálne vzdialenosti (Floyd)");
        floydBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                floydBtnActionPerformed(evt);
            }
        });

        primBtn.setText("Najlacnejšia kostra (Prim)");
        primBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                primBtnActionPerformed(evt);
            }
        });

        kruskalBtn.setText("Najlacnejšia kostra (Kruskal)");
        kruskalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kruskalBtnActionPerformed(evt);
            }
        });

        christofidesBtn.setText("Najväčšia očakávaná šírka (Christofides)");
        christofidesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                christofidesBtnActionPerformed(evt);
            }
        });

        maxTokBtn.setText("Maximálny tok (Ford-Fulkerson)");
        maxTokBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxTokBtnActionPerformed(evt);
            }
        });

        matchingBtn.setText("Matching maximálnej váhy");
        matchingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchingBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("© 2014 by Štefan Bocko, Matej Aštary, Július Mareš");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(matchingBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                            .addComponent(maxTokBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                            .addComponent(christofidesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 247, Short.MAX_VALUE)
                            .addComponent(kruskalBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                            .addComponent(primBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                            .addComponent(floydBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(suborTextfield, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addComponent(dijkstraBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                            .addComponent(fordBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(suborTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dijkstraBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fordBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(floydBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(primBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(kruskalBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(christofidesBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(maxTokBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(matchingBtn))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void floydBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_floydBtnActionPerformed
// TODO add your handling code here:
    if(graph == null){
        outputTextArea.setText("Žiadny graf nie je k dispozícii! Najprv načítajte graf.");
        return;
    }
    outputTextArea.setText("Floydov algoritmus ešte nie je naimplementovaný");
}//GEN-LAST:event_floydBtnActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    JFileChooser fileChooser = new JFileChooser();
    int hodnota = fileChooser.showDialog(null, "Načítaj graf");
    
    if(hodnota == JFileChooser.APPROVE_OPTION){
        outputTextArea.setText("");
        File subor = fileChooser.getSelectedFile();
        
        gr = new GraphReader();
    	graph = gr.readGraphFromFile(subor.getPath());
        
        if(graph != null){
            suborTextfield.setText(subor.getAbsolutePath());
            GraphInfo gi=new GraphInfo(graph);
            outputTextArea.setText(gi.basicGraphInfo());
        }else{
            JOptionPane.showMessageDialog(null, "Graf sa nepodarilo načítať!");
        }
    }
}//GEN-LAST:event_jButton1ActionPerformed

private void dijkstraBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dijkstraBtnActionPerformed
// TODO add your handling code here:
    if(graph == null){
        outputTextArea.setText("Žiadny graf nie je k dispozícii! Najprv načítajte graf.");
        return;
    }
    outputTextArea.setText("Dijkstrov algoritmus ešte nie je naimplementovaný");
}//GEN-LAST:event_dijkstraBtnActionPerformed

private void fordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fordBtnActionPerformed
// TODO add your handling code here:
    if(graph == null){
        outputTextArea.setText("Žiadny graf nie je k dispozícii! Najprv načítajte graf.");
        return;
    }
    outputTextArea.setText("Fordov algoritmus ešte nie je naimplementovaný");
}//GEN-LAST:event_fordBtnActionPerformed

private void primBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_primBtnActionPerformed
// TODO add your handling code here:
    if(graph == null){
        outputTextArea.setText("Žiadny graf nie je k dispozícii! Najprv načítajte graf.");
        return;
    }
    outputTextArea.setText("Primov algoritmus ešte nie je naimplementovaný");
}//GEN-LAST:event_primBtnActionPerformed

private void kruskalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kruskalBtnActionPerformed
// TODO add your handling code here:
    if(graph == null){
        outputTextArea.setText("Žiadny graf nie je k dispozícii! Najprv načítajte graf.");
        return;
    }
    outputTextArea.setText("Kruskalov algoritmus ešte nie je naimplementovaný");
}//GEN-LAST:event_kruskalBtnActionPerformed

private void christofidesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_christofidesBtnActionPerformed
// TODO add your handling code here:
    if(graph == null){
        outputTextArea.setText("Žiadny graf nie je k dispozícii! Najprv načítajte graf.");
        return;
    }
    outputTextArea.setText("Christofidesov algoritmus ešte nie je naimplementovaný");
}//GEN-LAST:event_christofidesBtnActionPerformed

private void maxTokBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxTokBtnActionPerformed
// TODO add your handling code here:
    if(graph == null){
        outputTextArea.setText("Žiadny graf nie je k dispozícii! Najprv načítajte graf.");
        return;
    }
    outputTextArea.setText("Ford_Fulkersonov algoritmus ešte nie je naimplementovaný");
}//GEN-LAST:event_maxTokBtnActionPerformed

private void matchingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchingBtnActionPerformed
// TODO add your handling code here:
    if(graph == null){
        outputTextArea.setText("Žiadny graf nie je k dispozícii! Najprv načítajte graf.");
        return;
    }
    outputTextArea.setText("Matching maximálnej váhy ešte nie je naimplementovaný");
}//GEN-LAST:event_matchingBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GraphJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton christofidesBtn;
    private javax.swing.JButton dijkstraBtn;
    private javax.swing.JButton floydBtn;
    private javax.swing.JButton fordBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton kruskalBtn;
    private javax.swing.JButton matchingBtn;
    private javax.swing.JButton maxTokBtn;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JButton primBtn;
    private javax.swing.JTextField suborTextfield;
    // End of variables declaration//GEN-END:variables
}
